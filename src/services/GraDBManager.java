package services;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import pozyczak.Gra;



public class GraDBManager {
	
	private Connection conn;
	private Statement StworzTabele;
	private PreparedStatement DodajGreStmt;
	private PreparedStatement PobierzGryStmt;
	private PreparedStatement ZnajdzGrePoTytuleStmt;
	private PreparedStatement UsunGreStmt;
	private PreparedStatement UsunWszystkieGryStmt; 

	
	public GraDBManager(){
		
		try {
		conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
		StworzTabele = conn.createStatement();
		ResultSet wynik = conn.getMetaData().getTables(null, null, null, null);
		boolean GryTableExists=false;
		while(wynik.next())
		{
		if("Gry".equalsIgnoreCase(wynik.getString("Table_Name")))
		{
		GryTableExists=true;
		break;
		}
		}
		if(!GryTableExists)
		{
		StworzTabele.executeUpdate("" +
		"CREATE TABLE Gry(" +
		"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
		"Tytul varchar(20)," + " Platforma varchar(50),"+
		"Constraint urzytkownik_fk foreign key (id_urzytkownik) references Urzytkownicy(id) on delete cascade" +
		")");
		}
		DodajGreStmt = conn.prepareStatement("" +"INSERT INTO Ksiazki (Autor, Tytul, Cena, id_osoba) VALUES (?,?,?,?)" +"");
		PobierzGryStmt = conn.prepareStatement("" +"SELECT * FROM Ksiazki" +"");
		ZnajdzGrePoTytuleStmt = conn.prepareStatement("SELECT * FROM Ksiazki WHERE Autor= ?");
		UsunGreStmt = conn.prepareStatement("DELETE FROM Ksiazki WHERE ID = ?");
		UsunWszystkieGryStmt = conn.prepareStatement("DELETE FROM Ksiazki");

		} catch (SQLException e) {

		e.printStackTrace();
		}
		}
	public List<Integer> ZnajdzGrePoTytule (String tytul) {
		try {
		List<Integer> wyszukane = new ArrayList<Integer>();
		ZnajdzGrePoTytuleStmt.setString(1, tytul);
		ResultSet wynik = ZnajdzGrePoTytuleStmt.executeQuery();
		while (wynik.next())
		wyszukane.add(wynik.getInt("ID"));
		return wyszukane;
		} catch (SQLException e) {
		e.printStackTrace();
		}
		return null;
		}

	public void DodajKsiazke (Gra G, List<Integer> urzytkownik){
		try {
		
		DodajGreStmt.setString(1, G.getTytul());
		DodajGreStmt.setString(2, G.getPlatforma());
		for (Integer Id : urzytkownik){
		DodajGreStmt.setInt(4, Id);
		}
		DodajGreStmt.executeUpdate();

		} catch (SQLException e) {

		e.printStackTrace();
		}
	}
	public List<Gra> PobierzKsiazki (){
		List<Gra> gry =new ArrayList<Gra>();

		try {
		ResultSet wynik = PobierzGryStmt.executeQuery();

		while(wynik.next())
		{
		gry.add(new Gra(wynik.getString("Tytul"),wynik.getString("Platforma")));
		}

		} catch (SQLException e) {

		e.printStackTrace();
		}

		return gry;
		}

	public void UsunGre(List<Integer> gry) {
		try {
		for (Integer id : gry) {
			
			UsunGreStmt.setInt(1, id);
			UsunGreStmt.executeUpdate();
			}
		} 
		catch (SQLException e) {
		e.printStackTrace();
		}
	}
	public void UsunWszystkieGry() {
		try {
			UsunWszystkieGryStmt.executeUpdate();
		}
		catch (SQLException e)
		{
		e.printStackTrace();
		}
		}


}
